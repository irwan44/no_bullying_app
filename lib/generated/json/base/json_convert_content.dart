// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:kreki119/app/data/model/response/ambulance_entity.dart';
import 'package:kreki119/app/data/model/response/app_notification_entity.dart';
import 'package:kreki119/app/data/model/response/app_user_entity.dart';
import 'package:kreki119/app/data/model/response/assets_entity.dart';
import 'package:kreki119/app/data/model/response/city_entity.dart';
import 'package:kreki119/app/data/model/response/contact_entity.dart';
import 'package:kreki119/app/data/model/response/emergency_entity.dart';
import 'package:kreki119/app/data/model/response/emergency_mobile_entity.dart';
import 'package:kreki119/app/data/model/response/error_entity.dart';
import 'package:kreki119/app/data/model/response/firebase_user_entity.dart';
import 'package:kreki119/app/data/model/response/hero_category_entity.dart';
import 'package:kreki119/app/data/model/response/hospital_entity.dart';
import 'package:kreki119/app/data/model/response/location_entity.dart';
import 'package:kreki119/app/data/model/response/my_location_entity.dart';
import 'package:kreki119/app/data/model/response/notification_mobile_entity.dart';
import 'package:kreki119/app/data/model/response/notification_payload_entity.dart';
import 'package:kreki119/app/data/model/response/pagination_entity.dart';
import 'package:kreki119/app/data/model/response/place_detail_entity.dart';
import 'package:kreki119/app/data/model/response/place_entity.dart';
import 'package:kreki119/app/data/model/response/progress_entity.dart';
import 'package:kreki119/app/data/model/response/province_entity.dart';
import 'package:kreki119/app/data/model/response/psc_entity.dart';
import 'package:kreki119/app/data/model/response/role_entity.dart';
import 'package:kreki119/app/data/model/response/sign_in_entity.dart';
import 'package:kreki119/app/data/model/response/user_jwt_entity.dart';
import 'package:kreki119/app/data/model/response/user_mobile_entity.dart';
import 'package:kreki119/app/data/model/response/volunteer_entity.dart';
import 'package:kreki119/app/data/model/response/volunteer_info_entity.dart';
import 'package:kreki119/app/data/model/response/volunteer_mobile.dart';
import 'package:kreki119/app/data/model/response/weather_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(AmbulanceEntity).toString(): AmbulanceEntity.fromJson,
		(AmbulanceCreatedAt).toString(): AmbulanceCreatedAt.fromJson,
		(AmbulanceUpdateAt).toString(): AmbulanceUpdateAt.fromJson,
		(AppNotificationEntity).toString(): AppNotificationEntity.fromJson,
		(AppUserEntity).toString(): AppUserEntity.fromJson,
		(AssetsEntity).toString(): AssetsEntity.fromJson,
		(CityEntity).toString(): CityEntity.fromJson,
		(ContactEntity).toString(): ContactEntity.fromJson,
		(ContactCreatedAt).toString(): ContactCreatedAt.fromJson,
		(ContactUpdatedAt).toString(): ContactUpdatedAt.fromJson,
		(EmergencyEntity).toString(): EmergencyEntity.fromJson,
		(EmergencyMobileEntity).toString(): EmergencyMobileEntity.fromJson,
		(EmergencyMobileCreatedAt).toString(): EmergencyMobileCreatedAt.fromJson,
		(EmergencyMobileUpdateAt).toString(): EmergencyMobileUpdateAt.fromJson,
		(EmergencyMobileStatus).toString(): EmergencyMobileStatus.fromJson,
		(ErrorEntity).toString(): ErrorEntity.fromJson,
		(FirebaseUserEntity).toString(): FirebaseUserEntity.fromJson,
		(UserContact).toString(): UserContact.fromJson,
		(HeroCategoryEntity).toString(): HeroCategoryEntity.fromJson,
		(HospitalEntity).toString(): HospitalEntity.fromJson,
		(LocationEntity).toString(): LocationEntity.fromJson,
		(MyLocationEntity).toString(): MyLocationEntity.fromJson,
		(MyLocationLocation).toString(): MyLocationLocation.fromJson,
		(NotificationMobileEntity).toString(): NotificationMobileEntity.fromJson,
		(NotificationPayloadEntity).toString(): NotificationPayloadEntity.fromJson,
		(NotificationPayloadItem).toString(): NotificationPayloadItem.fromJson,
		(NotificationPayloadItemLocation).toString(): NotificationPayloadItemLocation.fromJson,
		(PaginationEntity).toString(): PaginationEntity.fromJson,
		(PlaceDetailEntity).toString(): PlaceDetailEntity.fromJson,
		(PlaceEntity).toString(): PlaceEntity.fromJson,
		(ProgressEntity).toString(): ProgressEntity.fromJson,
		(ProvinceEntity).toString(): ProvinceEntity.fromJson,
		(PscEntity).toString(): PscEntity.fromJson,
		(PscCreatedAt).toString(): PscCreatedAt.fromJson,
		(PscUpdatedAt).toString(): PscUpdatedAt.fromJson,
		(RoleEntity).toString(): RoleEntity.fromJson,
		(SignInEntity).toString(): SignInEntity.fromJson,
		(UserJwtEntity).toString(): UserJwtEntity.fromJson,
		(UserJwtFirebase).toString(): UserJwtFirebase.fromJson,
		(UserJwtFirebaseIdentities).toString(): UserJwtFirebaseIdentities.fromJson,
		(UserMobileEntity).toString(): UserMobileEntity.fromJson,
		(VolunteerEntity).toString(): VolunteerEntity.fromJson,
		(VolunteerCreatedAt).toString(): VolunteerCreatedAt.fromJson,
		(VolunteerUpdatedAt).toString(): VolunteerUpdatedAt.fromJson,
		(VolunteerInfoEntity).toString(): VolunteerInfoEntity.fromJson,
		(VolunteerMobile).toString(): VolunteerMobile.fromJson,
		(VolunteerMobileCreatedAt).toString(): VolunteerMobileCreatedAt.fromJson,
		(VolunteerMobileUpdatedAt).toString(): VolunteerMobileUpdatedAt.fromJson,
		(WeatherEntity).toString(): WeatherEntity.fromJson,
		(WeatherData).toString(): WeatherData.fromJson,
		(WeatherDataForecast).toString(): WeatherDataForecast.fromJson,
		(WeatherDataForecastIssue).toString(): WeatherDataForecastIssue.fromJson,
		(WeatherDataForecastIssueTimestamp).toString(): WeatherDataForecastIssueTimestamp.fromJson,
		(WeatherDataForecastIssueYear).toString(): WeatherDataForecastIssueYear.fromJson,
		(WeatherDataForecastIssueMonth).toString(): WeatherDataForecastIssueMonth.fromJson,
		(WeatherDataForecastIssueDay).toString(): WeatherDataForecastIssueDay.fromJson,
		(WeatherDataForecastIssueHour).toString(): WeatherDataForecastIssueHour.fromJson,
		(WeatherDataForecastIssueMinute).toString(): WeatherDataForecastIssueMinute.fromJson,
		(WeatherDataForecastIssueSecond).toString(): WeatherDataForecastIssueSecond.fromJson,
		(WeatherDataForecastArea).toString(): WeatherDataForecastArea.fromJson,
		(WeatherDataForecastAreaName).toString(): WeatherDataForecastAreaName.fromJson,
		(WeatherDataForecastAreaParameter).toString(): WeatherDataForecastAreaParameter.fromJson,
		(WeatherDataForecastAreaParameterTimerange).toString(): WeatherDataForecastAreaParameterTimerange.fromJson,
		(WeatherDataForecastAreaParameterTimerangeValue).toString(): WeatherDataForecastAreaParameterTimerangeValue.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<AmbulanceEntity>[] is M){
			return data.map<AmbulanceEntity>((Map<String, dynamic> e) => AmbulanceEntity.fromJson(e)).toList() as M;
		}
		if(<AmbulanceCreatedAt>[] is M){
			return data.map<AmbulanceCreatedAt>((Map<String, dynamic> e) => AmbulanceCreatedAt.fromJson(e)).toList() as M;
		}
		if(<AmbulanceUpdateAt>[] is M){
			return data.map<AmbulanceUpdateAt>((Map<String, dynamic> e) => AmbulanceUpdateAt.fromJson(e)).toList() as M;
		}
		if(<AppNotificationEntity>[] is M){
			return data.map<AppNotificationEntity>((Map<String, dynamic> e) => AppNotificationEntity.fromJson(e)).toList() as M;
		}
		if(<AppUserEntity>[] is M){
			return data.map<AppUserEntity>((Map<String, dynamic> e) => AppUserEntity.fromJson(e)).toList() as M;
		}
		if(<AssetsEntity>[] is M){
			return data.map<AssetsEntity>((Map<String, dynamic> e) => AssetsEntity.fromJson(e)).toList() as M;
		}
		if(<CityEntity>[] is M){
			return data.map<CityEntity>((Map<String, dynamic> e) => CityEntity.fromJson(e)).toList() as M;
		}
		if(<ContactEntity>[] is M){
			return data.map<ContactEntity>((Map<String, dynamic> e) => ContactEntity.fromJson(e)).toList() as M;
		}
		if(<ContactCreatedAt>[] is M){
			return data.map<ContactCreatedAt>((Map<String, dynamic> e) => ContactCreatedAt.fromJson(e)).toList() as M;
		}
		if(<ContactUpdatedAt>[] is M){
			return data.map<ContactUpdatedAt>((Map<String, dynamic> e) => ContactUpdatedAt.fromJson(e)).toList() as M;
		}
		if(<EmergencyEntity>[] is M){
			return data.map<EmergencyEntity>((Map<String, dynamic> e) => EmergencyEntity.fromJson(e)).toList() as M;
		}
		if(<EmergencyMobileEntity>[] is M){
			return data.map<EmergencyMobileEntity>((Map<String, dynamic> e) => EmergencyMobileEntity.fromJson(e)).toList() as M;
		}
		if(<EmergencyMobileCreatedAt>[] is M){
			return data.map<EmergencyMobileCreatedAt>((Map<String, dynamic> e) => EmergencyMobileCreatedAt.fromJson(e)).toList() as M;
		}
		if(<EmergencyMobileUpdateAt>[] is M){
			return data.map<EmergencyMobileUpdateAt>((Map<String, dynamic> e) => EmergencyMobileUpdateAt.fromJson(e)).toList() as M;
		}
		if(<EmergencyMobileStatus>[] is M){
			return data.map<EmergencyMobileStatus>((Map<String, dynamic> e) => EmergencyMobileStatus.fromJson(e)).toList() as M;
		}
		if(<ErrorEntity>[] is M){
			return data.map<ErrorEntity>((Map<String, dynamic> e) => ErrorEntity.fromJson(e)).toList() as M;
		}
		if(<FirebaseUserEntity>[] is M){
			return data.map<FirebaseUserEntity>((Map<String, dynamic> e) => FirebaseUserEntity.fromJson(e)).toList() as M;
		}
		if(<UserContact>[] is M){
			return data.map<UserContact>((Map<String, dynamic> e) => UserContact.fromJson(e)).toList() as M;
		}
		if(<HeroCategoryEntity>[] is M){
			return data.map<HeroCategoryEntity>((Map<String, dynamic> e) => HeroCategoryEntity.fromJson(e)).toList() as M;
		}
		if(<HospitalEntity>[] is M){
			return data.map<HospitalEntity>((Map<String, dynamic> e) => HospitalEntity.fromJson(e)).toList() as M;
		}
		if(<LocationEntity>[] is M){
			return data.map<LocationEntity>((Map<String, dynamic> e) => LocationEntity.fromJson(e)).toList() as M;
		}
		if(<MyLocationEntity>[] is M){
			return data.map<MyLocationEntity>((Map<String, dynamic> e) => MyLocationEntity.fromJson(e)).toList() as M;
		}
		if(<MyLocationLocation>[] is M){
			return data.map<MyLocationLocation>((Map<String, dynamic> e) => MyLocationLocation.fromJson(e)).toList() as M;
		}
		if(<NotificationMobileEntity>[] is M){
			return data.map<NotificationMobileEntity>((Map<String, dynamic> e) => NotificationMobileEntity.fromJson(e)).toList() as M;
		}
		if(<NotificationPayloadEntity>[] is M){
			return data.map<NotificationPayloadEntity>((Map<String, dynamic> e) => NotificationPayloadEntity.fromJson(e)).toList() as M;
		}
		if(<NotificationPayloadItem>[] is M){
			return data.map<NotificationPayloadItem>((Map<String, dynamic> e) => NotificationPayloadItem.fromJson(e)).toList() as M;
		}
		if(<NotificationPayloadItemLocation>[] is M){
			return data.map<NotificationPayloadItemLocation>((Map<String, dynamic> e) => NotificationPayloadItemLocation.fromJson(e)).toList() as M;
		}
		if(<PaginationEntity>[] is M){
			return data.map<PaginationEntity>((Map<String, dynamic> e) => PaginationEntity.fromJson(e)).toList() as M;
		}
		if(<PlaceDetailEntity>[] is M){
			return data.map<PlaceDetailEntity>((Map<String, dynamic> e) => PlaceDetailEntity.fromJson(e)).toList() as M;
		}
		if(<PlaceEntity>[] is M){
			return data.map<PlaceEntity>((Map<String, dynamic> e) => PlaceEntity.fromJson(e)).toList() as M;
		}
		if(<ProgressEntity>[] is M){
			return data.map<ProgressEntity>((Map<String, dynamic> e) => ProgressEntity.fromJson(e)).toList() as M;
		}
		if(<ProvinceEntity>[] is M){
			return data.map<ProvinceEntity>((Map<String, dynamic> e) => ProvinceEntity.fromJson(e)).toList() as M;
		}
		if(<PscEntity>[] is M){
			return data.map<PscEntity>((Map<String, dynamic> e) => PscEntity.fromJson(e)).toList() as M;
		}
		if(<PscCreatedAt>[] is M){
			return data.map<PscCreatedAt>((Map<String, dynamic> e) => PscCreatedAt.fromJson(e)).toList() as M;
		}
		if(<PscUpdatedAt>[] is M){
			return data.map<PscUpdatedAt>((Map<String, dynamic> e) => PscUpdatedAt.fromJson(e)).toList() as M;
		}
		if(<RoleEntity>[] is M){
			return data.map<RoleEntity>((Map<String, dynamic> e) => RoleEntity.fromJson(e)).toList() as M;
		}
		if(<SignInEntity>[] is M){
			return data.map<SignInEntity>((Map<String, dynamic> e) => SignInEntity.fromJson(e)).toList() as M;
		}
		if(<UserJwtEntity>[] is M){
			return data.map<UserJwtEntity>((Map<String, dynamic> e) => UserJwtEntity.fromJson(e)).toList() as M;
		}
		if(<UserJwtFirebase>[] is M){
			return data.map<UserJwtFirebase>((Map<String, dynamic> e) => UserJwtFirebase.fromJson(e)).toList() as M;
		}
		if(<UserJwtFirebaseIdentities>[] is M){
			return data.map<UserJwtFirebaseIdentities>((Map<String, dynamic> e) => UserJwtFirebaseIdentities.fromJson(e)).toList() as M;
		}
		if(<UserMobileEntity>[] is M){
			return data.map<UserMobileEntity>((Map<String, dynamic> e) => UserMobileEntity.fromJson(e)).toList() as M;
		}
		if(<VolunteerEntity>[] is M){
			return data.map<VolunteerEntity>((Map<String, dynamic> e) => VolunteerEntity.fromJson(e)).toList() as M;
		}
		if(<VolunteerCreatedAt>[] is M){
			return data.map<VolunteerCreatedAt>((Map<String, dynamic> e) => VolunteerCreatedAt.fromJson(e)).toList() as M;
		}
		if(<VolunteerUpdatedAt>[] is M){
			return data.map<VolunteerUpdatedAt>((Map<String, dynamic> e) => VolunteerUpdatedAt.fromJson(e)).toList() as M;
		}
		if(<VolunteerInfoEntity>[] is M){
			return data.map<VolunteerInfoEntity>((Map<String, dynamic> e) => VolunteerInfoEntity.fromJson(e)).toList() as M;
		}
		if(<VolunteerMobile>[] is M){
			return data.map<VolunteerMobile>((Map<String, dynamic> e) => VolunteerMobile.fromJson(e)).toList() as M;
		}
		if(<VolunteerMobileCreatedAt>[] is M){
			return data.map<VolunteerMobileCreatedAt>((Map<String, dynamic> e) => VolunteerMobileCreatedAt.fromJson(e)).toList() as M;
		}
		if(<VolunteerMobileUpdatedAt>[] is M){
			return data.map<VolunteerMobileUpdatedAt>((Map<String, dynamic> e) => VolunteerMobileUpdatedAt.fromJson(e)).toList() as M;
		}
		if(<WeatherEntity>[] is M){
			return data.map<WeatherEntity>((Map<String, dynamic> e) => WeatherEntity.fromJson(e)).toList() as M;
		}
		if(<WeatherData>[] is M){
			return data.map<WeatherData>((Map<String, dynamic> e) => WeatherData.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecast>[] is M){
			return data.map<WeatherDataForecast>((Map<String, dynamic> e) => WeatherDataForecast.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastIssue>[] is M){
			return data.map<WeatherDataForecastIssue>((Map<String, dynamic> e) => WeatherDataForecastIssue.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastIssueTimestamp>[] is M){
			return data.map<WeatherDataForecastIssueTimestamp>((Map<String, dynamic> e) => WeatherDataForecastIssueTimestamp.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastIssueYear>[] is M){
			return data.map<WeatherDataForecastIssueYear>((Map<String, dynamic> e) => WeatherDataForecastIssueYear.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastIssueMonth>[] is M){
			return data.map<WeatherDataForecastIssueMonth>((Map<String, dynamic> e) => WeatherDataForecastIssueMonth.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastIssueDay>[] is M){
			return data.map<WeatherDataForecastIssueDay>((Map<String, dynamic> e) => WeatherDataForecastIssueDay.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastIssueHour>[] is M){
			return data.map<WeatherDataForecastIssueHour>((Map<String, dynamic> e) => WeatherDataForecastIssueHour.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastIssueMinute>[] is M){
			return data.map<WeatherDataForecastIssueMinute>((Map<String, dynamic> e) => WeatherDataForecastIssueMinute.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastIssueSecond>[] is M){
			return data.map<WeatherDataForecastIssueSecond>((Map<String, dynamic> e) => WeatherDataForecastIssueSecond.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastArea>[] is M){
			return data.map<WeatherDataForecastArea>((Map<String, dynamic> e) => WeatherDataForecastArea.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastAreaName>[] is M){
			return data.map<WeatherDataForecastAreaName>((Map<String, dynamic> e) => WeatherDataForecastAreaName.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastAreaParameter>[] is M){
			return data.map<WeatherDataForecastAreaParameter>((Map<String, dynamic> e) => WeatherDataForecastAreaParameter.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastAreaParameterTimerange>[] is M){
			return data.map<WeatherDataForecastAreaParameterTimerange>((Map<String, dynamic> e) => WeatherDataForecastAreaParameterTimerange.fromJson(e)).toList() as M;
		}
		if(<WeatherDataForecastAreaParameterTimerangeValue>[] is M){
			return data.map<WeatherDataForecastAreaParameterTimerangeValue>((Map<String, dynamic> e) => WeatherDataForecastAreaParameterTimerangeValue.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}